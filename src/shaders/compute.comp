#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0 
} numBlades;

layout(set = 2, binding = 1) buffer bladesBuffer
{
    Blade blades[];
};
layout(set = 2, binding = 2) buffer culledBladesBuffer
{
    Blade culledBlades[];
};

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 8192;
	}
	barrier(); // Wait till all threads reach this point

   



    vec3 v0 = blades[gl_GlobalInvocationID.x].v0.xyz;
    vec3 v1 = blades[gl_GlobalInvocationID.x].v1.xyz;
    vec3 v2 = blades[gl_GlobalInvocationID.x].v2.xyz;
    vec3 up = blades[gl_GlobalInvocationID.x].up.xyz;

    float orientation = blades[gl_GlobalInvocationID.x].v0.w;
    float height = blades[gl_GlobalInvocationID.x].v1.w;
    float width = blades[gl_GlobalInvocationID.x].v2.w;;
    float stiffness = blades[gl_GlobalInvocationID.x].up.w;

    //For now, assume up is always (0, 1, 0)
    vec3 bitangent = normalize(vec3(-cos(orientation), 0.0, sin(orientation))); 
    vec3 forward = normalize(cross(bitangent, up));
    
    vec3 gravDir = vec3(0, -1, 0);
    float gravConst = 9.806;

    vec3 enviroGrav = gravDir * gravConst;
    vec3 frontGrav = 0.25 * forward * gravConst;

    vec3 totalGrav = enviroGrav + frontGrav;

    //Recover original position of V2
    vec3 iV2 = v0 + height * up;

    vec3 recovery = (iV2 - v2) * stiffness;

    vec3 wind = vec3((cos(totalTime * 2) + 3) * 2, 0, (sin(totalTime * 3) + 3) * 2);
    
    float directionalAlignment = 1 - abs(dot(normalize(wind), normalize(v2 - v0)));
    float heightRatio = dot(v2 - v0, up) / height;

    vec3 windForce = wind * directionalAlignment * heightRatio;
    //windForce = vec3(0, 0, 0);


    v2 += (totalGrav + recovery + windForce) * deltaTime;
    

    v2 = v2 - up * min(dot(up, v2 - v0), 0);

    float lProj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lProj/height, 0.05 * max(lProj/height, 1));

    float L = length(v1 - v0) + length(v2 - v1);

    float r = L / height;



    vec3 v1Corrected = v0 + r * (v1 - v0);
    vec3 v2Corrected = v1Corrected + r * (v2 - v1);

    blades[gl_GlobalInvocationID.x].v1 = vec4(v1Corrected, height);
    blades[gl_GlobalInvocationID.x].v2 = vec4(v2Corrected, width);

    culledBlades[gl_GlobalInvocationID.x] = blades[gl_GlobalInvocationID.x];


    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
